// Generated by CoffeeScript 2.5.1
(function() {
  // log = -> console?.log?.apply(console, arguments)
  /*
  The values which are strings wrapped in backticks (`) are evaluated
  before being compared.
  */
  var ForComparison, isObject, isString, rotateText, supportsCanvas, values;

  isString = function(obj) {
    return Object.prototype.toString.call(obj) === "[object String]";
  };

  isObject = function(obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
  };

  ForComparison = class ForComparison {
    constructor(item1) {
      var match, mtch;
      this.item = item1;
      /*
      The goal here is to get a string that evaluates to the desired
      value. This string is set to object.asString

      For complicated cases which can't be passed in JSON the value
      can be passed as a string wrapped in backticks which is evaluated
      here.
      example: "`parseFloat("nan")`" means NaN.
      */
      this.asString = `${this.item}`;
      if (isString(this.item)) {
        if (this.item.length > 0 && (mtch = this.item.match(/^`(.*)`$/))) {
          match = mtch[1];
          this.item = new Function(`return ${match}`)();
          if (isString(this.item)) {
            this.asString = JSON.stringify(this.item);
          } else if (this.item === undefined) {
            this.asString = "undefined";
          } else if (isObject(this.item)) {
            this.asString = JSON.stringify(this.item);
          } else if (isNaN(this.item)) {
            this.asString = "NaN";
          } else {
            this.asString = JSON.stringify(this.item);
          }
        } else if (this.item.length === 0) {
          this.asString = '""';
        }
      } else if (this.item.toString() === "[object Object]") {
        this.asString = "{}";
      } else if (this.item instanceof Array) {
        this.asString = JSON.stringify(this.item);
      }
    }

    testResults(fc2, comparator = "===") {
      var evalStr;
      evalStr = "" + this.asString + comparator + fc2.asString;
      return [evalStr, eval('(' + evalStr + ')')];
    }

    testResultsObjectIs(fc2) {
      var evalStr;
      evalStr = 'Object.is(' + this.asString + ',' + fc2.asString + ')';
      return [evalStr, eval('(' + evalStr + ')')];
    }

    toString() {
      return this.asString;
    }

  };

  values = [true, false, 1, +0, -0, -1, "`'true'`", "`'false'`", "`'1'`", "`'0'`", "`'-1'`", "", " ", "`null`", "`undefined`", "`[]`", "`{}`", [[]], [0], [1], "`parseFloat('nan')`"];

  (function() {    // Ensure that the values going in are converted to string properly (for the table headers)
    var testRepr;
    testRepr = function(what, shouldBe) {
      var fc;
      fc = new ForComparison(what);
      if (fc.toString() !== shouldBe) {
        throw new Error("Value is not being represented correctly.");
      }
    };
    testRepr(true, "true");
    testRepr(false, "false");
    testRepr(1, "1");
    testRepr(0, "0");
    testRepr(-1, "-1");
    testRepr("`'true'`", "\"true\"");
    testRepr("`'false'`", "\"false\"");
    testRepr("`'1'`", "\"1\"");
    testRepr("`'0'`", "\"0\"");
    testRepr("`'-1'`", "\"-1\"");
    testRepr("", "\"\"");
    testRepr("`null`", "null");
    testRepr("`undefined`", "undefined");
    testRepr("`[]`", "[]");
    testRepr("`{}`", "{}");
    testRepr([[]], "[[]]");
    testRepr([0], "[0]");
    testRepr([1], "[1]");
    return testRepr("`parseFloat('nan')`", "NaN");
  })();

  (function() {
    var testEquality;
    testEquality = function(tf, item, comparator) {
      var fc1;
      fc1 = new ForComparison(item);
      if (fc1.testResults(fc1, comparator)[1] !== tf) {
        throw new Error(`Condition should be ${tf}`);
      }
    };
    // easy case
    testEquality(true==true, "`true`", "==");
    // these two were giving incorrect values before
    testEquality([[]]==[[]], "`[[]]`", "==");
    return testEquality([]==[], "`[]`", "==");
  })();

  supportsCanvas = (function() {
    var el;
    el = document.createElement("canvas");
    return !!(el.getContext && el.getContext("2d"));
  })();

  this.buildComparisonTable = function(values, comparator) {
    var $el, $headRow, $table, $tr, comp, comps, evalStr, i, j, k, len, len1, len2, td, tf, v, valX, valY, x, y;
    comps = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = values.length; i < len; i++) {
        v = values[i];
        results.push(new ForComparison(v));
      }
      return results;
    })();
    $table = $("<table>", {
      class: "comparisons"
    });
    $headRow = $("<tr>").append("<td>").appendTo($table);
    for (i = 0, len = comps.length; i < len; i++) {
      comp = comps[i];
      $el = supportsCanvas ? rotateText(comp.asString) : $("<span>", {
        class: "rotate",
        text: comp.asString
      });
      $("<td>", {
        class: "header col"
      }).html($el).appendTo($headRow);
    }
    for (x = j = 0, len1 = comps.length; j < len1; x = ++j) {
      valX = comps[x];
      $tr = $("<tr>").appendTo($table);
      $("<td>", {
        class: "row header"
      }).text(valX.asString).appendTo($tr);
      for (y = k = 0, len2 = comps.length; k < len2; y = ++k) {
        valY = comps[y];
        td = $("<td>", {
          class: "cell",
          html: "<div>&nbsp;</div>"
        }).appendTo($tr);
        [evalStr, tf] = valX.testResults(valY, comparator);
        td.attr("title", `${evalStr} // ${tf}`);
        if (tf) {
          td.addClass("equal");
        }
      }
    }
    return $table;
  };

  this.buildComparisonTableForIf = function(values) {
    var $table, $td, $tr, comp, comps, expression, i, len, v, val;
    comps = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = values.length; i < len; i++) {
        v = values[i];
        results.push(new ForComparison(v));
      }
      return results;
    })();
    $table = $("<table>", {
      class: "comparisons"
    });
    for (i = 0, len = comps.length; i < len; i++) {
      comp = comps[i];
      $tr = $("<tr>").html($("<td>", {
        class: "header row",
        text: comp.asString
      })).appendTo($table);
      $td = $("<td>", {
        class: "cell"
      }).html($("<div>", {
        html: "&nbsp;"
      })).appendTo($tr);
      val = (new Function(`if(${comp.asString}){return true}else{return false}`))();
      if (val) {
        $td.addClass("equal");
      }
      expression = ` if (${comp.asString}) { /* ${val ? 'executes' : 'does not execute'} */ } `;
      $("<td>", {
        class: "expression"
      }).html(expression).appendTo($tr);
    }
    return $table;
  };

  this.buildComparisonTableForObjectIs = function(values) {
    var $el, $headRow, $table, $tr, comp, comps, evalStr, i, j, k, len, len1, len2, td, tf, v, valX, valY, x, y;
    comps = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = values.length; i < len; i++) {
        v = values[i];
        results.push(new ForComparison(v));
      }
      return results;
    })();
    $table = $("<table>", {
      class: "comparisons"
    });
    $headRow = $("<tr>").append("<td>").appendTo($table);
    for (i = 0, len = comps.length; i < len; i++) {
      comp = comps[i];
      $el = supportsCanvas ? rotateText(comp.asString) : $("<span>", {
        class: "rotate",
        text: comp.asString
      });
      $("<td>", {
        class: "header col"
      }).html($el).appendTo($headRow);
    }
    for (x = j = 0, len1 = comps.length; j < len1; x = ++j) {
      valX = comps[x];
      $tr = $("<tr>").appendTo($table);
      $("<td>", {
        class: "row header"
      }).text(valX.asString).appendTo($tr);
      for (y = k = 0, len2 = comps.length; k < len2; y = ++k) {
        valY = comps[y];
        td = $("<td>", {
          class: "cell",
          html: "<div>&nbsp;</div>"
        }).appendTo($tr);
        [evalStr, tf] = valX.testResultsObjectIs(valY);
        td.attr("title", `${evalStr} // ${tf}`);
        if (tf) {
          td.addClass("equal");
        }
      }
    }
    return $table;
  };

  rotateText = function(txt, cHeight = 80) {
    var c, canv;
    canv = document.createElement("canvas");
    canv.width = "25";
    canv.height = cHeight;
    c = canv.getContext("2d");
    c.rotate(Math.PI / 2);
    c.font = "15px Monospace";
    c.textAlign = "right";
    c.fillText(txt, cHeight, -10);
    return canv;
  };

}).call(this);
